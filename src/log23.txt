Program state
ID: 1 
Exe Stack: VarDeclaration{name='a', type=int}
VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: null 
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='a', type=int}
VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: null 
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='a', type=int}
VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: null 
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=0 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=0 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=0 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=0 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

v=a+b
print(v)

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

v=a+b
print(v)

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: v=a+b
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: v=a+b
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: print(v)
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: print(v)
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: return()
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [null] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='a', type=int}
VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: null 
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='a', type=int}
VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: null 
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='a', type=int}
VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: null 
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=0 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=0 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=0 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=0 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

v=a+b
print(v)

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

v=a+b
print(v)

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: v=a+b
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: v=a+b
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: print(v)
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: print(v)
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: return()
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [null] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='a', type=int}
VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: null 
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='a', type=int}
VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: null 
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='a', type=int}
VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: null 
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=0 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=0 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=0 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=0 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

v=a+b
print(v)

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

v=a+b
print(v)

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: v=a+b
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='a', type=int}
VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: null 
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='a', type=int}
VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: null 
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='a', type=int}
VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: null 
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=0 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=0 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=0 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=0 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

v=a+b
print(v)

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='a', type=int}
VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: null 
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='a', type=int}
VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: null 
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='a', type=int}
VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: null 
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationsum([a, b])(v=a+b;print(v))
ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationproduct([a, b])(v=a*b;print(v))
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=0 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=0 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=0 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=0 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

v=a+b
print(v)

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

v=a+b
print(v)

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: v=a+b
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: v=a+b
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: print(v)
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: print(v)
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: return()
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [null] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=(v=a*b;print(v)) sum=[a, b]=(v=a+b;print(v)) 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='a', type=int}
VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: null 
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='a', type=int}
VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: null 
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='a', type=int}
VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: null 
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: print(a+b)
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: print(a+b)
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: return()
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: return()
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))
 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))
 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))
 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))
 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack:  
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: Call(product){[v, w]}
Fork(Call(sum){[v, w]})

 
Sym Table: null 
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: Call(product){[v, w]}
Fork(Call(sum){[v, w]})

 
Sym Table: null 
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: Call(product){[v, w]}
Fork(Call(sum){[v, w]})
 
Sym Table: null 
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: Call(product){[v, w]}
Fork(Call(sum){[v, w]})
 
Sym Table: null 
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: print(a*b)
 
Sym Table: null 
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: print(a*b)
 
Sym Table: null 
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: return()
Fork(Call(sum){[v, w]})
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: return()
Fork(Call(sum){[v, w]})
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: Fork(Call(sum){[v, w]})
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: Fork(Call(sum){[v, w]})
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack:  
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 3 
Exe Stack: Call(sum){[v, w]}
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 3 
Exe Stack: Call(sum){[v, w]}
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 3 
Exe Stack: print(a+b)
return()
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 3 
Exe Stack: print(a+b)
return()
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 3 
Exe Stack: return()
 
Sym Table: null 
Output Console: [25, 2, 10, 7] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 3 
Exe Stack: return()
 
Sym Table: null 
Output Console: [25, 2, 10, 7] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 3 
Exe Stack:  
Sym Table: null 
Output Console: [25, 2, 10, 7] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: VarDeclaration{name='a', type=int}
VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: null 
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: 

ProceduresTable: 

Program state
ID: 2 
Exe Stack: VarDeclaration{name='a', type=int}
VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: null 
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: 

ProceduresTable: 

Program state
ID: 2 
Exe Stack: VarDeclaration{name='a', type=int}
VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: null 
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: 

ProceduresTable: 

Program state
ID: 2 
Exe Stack: VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 

ProceduresTable: 

Program state
ID: 2 
Exe Stack: VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 

ProceduresTable: 

Program state
ID: 2 
Exe Stack: VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 

ProceduresTable: 

Program state
ID: 2 
Exe Stack: VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 

ProceduresTable: 

Program state
ID: 2 
Exe Stack: VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 

ProceduresTable: 

Program state
ID: 2 
Exe Stack: VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 

ProceduresTable: 

Program state
ID: 2 
Exe Stack: VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 

ProceduresTable: 

Program state
ID: 2 
Exe Stack: VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 

ProceduresTable: 

Program state
ID: 2 
Exe Stack: VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 

ProceduresTable: 

Program state
ID: 2 
Exe Stack: VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 

ProceduresTable: 

Program state
ID: 2 
Exe Stack: VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 

ProceduresTable: 

Program state
ID: 2 
Exe Stack: VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 

ProceduresTable: 

Program state
ID: 2 
Exe Stack: ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: 

Program state
ID: 2 
Exe Stack: ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: 

Program state
ID: 2 
Exe Stack: ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: 

Program state
ID: 2 
Exe Stack: ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: 

Program state
ID: 2 
Exe Stack: ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: print(a+b)
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: print(a+b)
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: return()
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: return()
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))
 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))
 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))
 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))
 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack:  
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 3 
Exe Stack: Call(product){[v, w]}
Fork(Call(sum){[v, w]})

 
Sym Table: null 
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 3 
Exe Stack: Call(product){[v, w]}
Fork(Call(sum){[v, w]})

 
Sym Table: null 
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 3 
Exe Stack: Call(product){[v, w]}
Fork(Call(sum){[v, w]})
 
Sym Table: null 
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 3 
Exe Stack: Call(product){[v, w]}
Fork(Call(sum){[v, w]})
 
Sym Table: null 
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 3 
Exe Stack: print(a*b)
 
Sym Table: null 
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 3 
Exe Stack: print(a*b)
 
Sym Table: null 
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 3 
Exe Stack: return()
Fork(Call(sum){[v, w]})
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 3 
Exe Stack: return()
Fork(Call(sum){[v, w]})
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 3 
Exe Stack: Fork(Call(sum){[v, w]})
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 3 
Exe Stack: Fork(Call(sum){[v, w]})
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 3 
Exe Stack:  
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 4 
Exe Stack: Call(sum){[v, w]}
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 4 
Exe Stack: Call(sum){[v, w]}
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 4 
Exe Stack: print(a+b)
return()
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 4 
Exe Stack: print(a+b)
return()
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 4 
Exe Stack: return()
 
Sym Table: null 
Output Console: [25, 2, 10, 7] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 4 
Exe Stack: return()
 
Sym Table: null 
Output Console: [25, 2, 10, 7] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 4 
Exe Stack:  
Sym Table: null 
Output Console: [25, 2, 10, 7] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='a', type=int}
VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: null 
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='a', type=int}
VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: null 
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='a', type=int}
VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: null 
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: print(a+b)
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: print(a+b)
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: return()
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: return()
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))
 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))
 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))
 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))
 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack:  
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: Call(product){[v, w]}
Fork(Call(sum){[v, w]})

 
Sym Table: null 
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: Call(product){[v, w]}
Fork(Call(sum){[v, w]})

 
Sym Table: null 
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: Call(product){[v, w]}
Fork(Call(sum){[v, w]})
 
Sym Table: null 
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: Call(product){[v, w]}
Fork(Call(sum){[v, w]})
 
Sym Table: null 
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: print(a*b)
 
Sym Table: null 
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: print(a*b)
 
Sym Table: null 
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: return()
Fork(Call(sum){[v, w]})
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: return()
Fork(Call(sum){[v, w]})
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: Fork(Call(sum){[v, w]})
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: Fork(Call(sum){[v, w]})
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack:  
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 3 
Exe Stack: Call(sum){[v, w]}
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 3 
Exe Stack: Call(sum){[v, w]}
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 3 
Exe Stack: print(a+b)
return()
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 3 
Exe Stack: print(a+b)
return()
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 3 
Exe Stack: return()
 
Sym Table: null 
Output Console: [25, 2, 10, 7] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 3 
Exe Stack: return()
 
Sym Table: null 
Output Console: [25, 2, 10, 7] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 3 
Exe Stack:  
Sym Table: null 
Output Console: [25, 2, 10, 7] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='a', type=int}
VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: null 
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='a', type=int}
VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: null 
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='a', type=int}
VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: null 
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: print(a+b)
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: print(a+b)
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: return()
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: return()
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))
 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))
 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))
 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))
 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack:  
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: Call(product){[v, w]}
Fork(Call(sum){[v, w]})

 
Sym Table: null 
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: Call(product){[v, w]}
Fork(Call(sum){[v, w]})

 
Sym Table: null 
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: Call(product){[v, w]}
Fork(Call(sum){[v, w]})
 
Sym Table: null 
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: Call(product){[v, w]}
Fork(Call(sum){[v, w]})
 
Sym Table: null 
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: print(a*b)
 
Sym Table: null 
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: print(a*b)
 
Sym Table: null 
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: return()
Fork(Call(sum){[v, w]})
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: return()
Fork(Call(sum){[v, w]})
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: Fork(Call(sum){[v, w]})
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: Fork(Call(sum){[v, w]})
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack:  
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 3 
Exe Stack: Call(sum){[v, w]}
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 3 
Exe Stack: Call(sum){[v, w]}
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 3 
Exe Stack: print(a+b)
return()
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 3 
Exe Stack: print(a+b)
return()
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 3 
Exe Stack: return()
 
Sym Table: null 
Output Console: [25, 2, 10, 7] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 3 
Exe Stack: return()
 
Sym Table: null 
Output Console: [25, 2, 10, 7] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 3 
Exe Stack:  
Sym Table: null 
Output Console: [25, 2, 10, 7] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='a', type=int}
VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: null 
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='a', type=int}
VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: null 
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='a', type=int}
VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: null 
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: print(a+b)
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: print(a+b)
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: return()
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: return()
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))
 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))
 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))
 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))
 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack:  
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: Call(product){[v, w]}
Fork(Call(sum){[v, w]})

 
Sym Table: null 
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: Call(product){[v, w]}
Fork(Call(sum){[v, w]})

 
Sym Table: null 
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: Call(product){[v, w]}
Fork(Call(sum){[v, w]})
 
Sym Table: null 
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: Call(product){[v, w]}
Fork(Call(sum){[v, w]})
 
Sym Table: null 
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: print(a*b)
 
Sym Table: null 
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: print(a*b)
 
Sym Table: null 
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: return()
Fork(Call(sum){[v, w]})
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: return()
Fork(Call(sum){[v, w]})
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: Fork(Call(sum){[v, w]})
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: Fork(Call(sum){[v, w]})
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack:  
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 3 
Exe Stack: Call(sum){[v, w]}
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 3 
Exe Stack: Call(sum){[v, w]}
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 3 
Exe Stack: print(a+b)
return()
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 3 
Exe Stack: print(a+b)
return()
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 3 
Exe Stack: return()
 
Sym Table: null 
Output Console: [25, 2, 10, 7] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 3 
Exe Stack: return()
 
Sym Table: null 
Output Console: [25, 2, 10, 7] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 3 
Exe Stack:  
Sym Table: null 
Output Console: [25, 2, 10, 7] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 5 
Exe Stack: VarDeclaration{name='a', type=int}
VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: null 
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: 

ProceduresTable: 

Program state
ID: 5 
Exe Stack: VarDeclaration{name='a', type=int}
VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: null 
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: 

ProceduresTable: 

Program state
ID: 5 
Exe Stack: VarDeclaration{name='a', type=int}
VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: null 
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: 

ProceduresTable: 

Program state
ID: 5 
Exe Stack: VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 

ProceduresTable: 

Program state
ID: 5 
Exe Stack: VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 

ProceduresTable: 

Program state
ID: 5 
Exe Stack: VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 

ProceduresTable: 

Program state
ID: 5 
Exe Stack: VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 

ProceduresTable: 

Program state
ID: 5 
Exe Stack: VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 

ProceduresTable: 

Program state
ID: 5 
Exe Stack: VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 

ProceduresTable: 

Program state
ID: 5 
Exe Stack: VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 

ProceduresTable: 

Program state
ID: 5 
Exe Stack: VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 

ProceduresTable: 

Program state
ID: 5 
Exe Stack: VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 

ProceduresTable: 

Program state
ID: 5 
Exe Stack: VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 

ProceduresTable: 

Program state
ID: 5 
Exe Stack: VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 

ProceduresTable: 

Program state
ID: 5 
Exe Stack: VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 

ProceduresTable: 

Program state
ID: 5 
Exe Stack: ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: 

Program state
ID: 5 
Exe Stack: ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: 

Program state
ID: 5 
Exe Stack: ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: 

Program state
ID: 5 
Exe Stack: ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: 

Program state
ID: 5 
Exe Stack: ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: sum=[a, b]=print(a+b) 

Program state
ID: 5 
Exe Stack: ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: sum=[a, b]=print(a+b) 

Program state
ID: 5 
Exe Stack: ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: sum=[a, b]=print(a+b) 

Program state
ID: 5 
Exe Stack: ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: sum=[a, b]=print(a+b) 

Program state
ID: 5 
Exe Stack: v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 5 
Exe Stack: v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 5 
Exe Stack: v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 5 
Exe Stack: v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 5 
Exe Stack: w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 5 
Exe Stack: w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 5 
Exe Stack: w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 5 
Exe Stack: w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 5 
Exe Stack: Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 5 
Exe Stack: Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 5 
Exe Stack: Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 5 
Exe Stack: Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 5 
Exe Stack: print(a+b)
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 5 
Exe Stack: print(a+b)
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 5 
Exe Stack: return()
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 5 
Exe Stack: return()
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 5 
Exe Stack: print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 5 
Exe Stack: print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 5 
Exe Stack: print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))
 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 5 
Exe Stack: print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))
 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 5 
Exe Stack: Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))
 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 5 
Exe Stack: Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))
 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 5 
Exe Stack:  
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 6 
Exe Stack: Call(product){[v, w]}
Fork(Call(sum){[v, w]})

 
Sym Table: null 
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 6 
Exe Stack: Call(product){[v, w]}
Fork(Call(sum){[v, w]})

 
Sym Table: null 
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 6 
Exe Stack: Call(product){[v, w]}
Fork(Call(sum){[v, w]})
 
Sym Table: null 
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 6 
Exe Stack: Call(product){[v, w]}
Fork(Call(sum){[v, w]})
 
Sym Table: null 
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 6 
Exe Stack: print(a*b)
 
Sym Table: null 
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 6 
Exe Stack: print(a*b)
 
Sym Table: null 
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 6 
Exe Stack: return()
Fork(Call(sum){[v, w]})
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 6 
Exe Stack: return()
Fork(Call(sum){[v, w]})
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 6 
Exe Stack: Fork(Call(sum){[v, w]})
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 6 
Exe Stack: Fork(Call(sum){[v, w]})
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 6 
Exe Stack:  
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 7 
Exe Stack: Call(sum){[v, w]}
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 7 
Exe Stack: Call(sum){[v, w]}
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 7 
Exe Stack: print(a+b)
return()
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 7 
Exe Stack: print(a+b)
return()
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 7 
Exe Stack: return()
 
Sym Table: null 
Output Console: [25, 2, 10, 7] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 7 
Exe Stack: return()
 
Sym Table: null 
Output Console: [25, 2, 10, 7] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 7 
Exe Stack:  
Sym Table: null 
Output Console: [25, 2, 10, 7] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='a', type=int}
VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: null 
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='a', type=int}
VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: null 
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='a', type=int}
VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: null 
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=int}
VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='w', type=int}
ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationsum([a, b])print(a+b)
ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: ProcedureDeclarationproduct([a, b])print(a*b)
v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: v=2
w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=0 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=0 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: w=5
Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=0 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: Call(sum){[v*10, w]}
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: print(a+b)
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: print(a+b)
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: return()
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: return()
print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25] 
File Table:  
Heap:  
StackOfSymTable: a=20 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))

 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))
 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: print(v)
Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))
 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))
 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: Fork((Call(product){[v, w]};Fork(Call(sum){[v, w]})))
 
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack:  
Sym Table: a=0 b=0 v=2 w=5  
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: Call(product){[v, w]}
Fork(Call(sum){[v, w]})

 
Sym Table: null 
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: Call(product){[v, w]}
Fork(Call(sum){[v, w]})

 
Sym Table: null 
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: Call(product){[v, w]}
Fork(Call(sum){[v, w]})
 
Sym Table: null 
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: Call(product){[v, w]}
Fork(Call(sum){[v, w]})
 
Sym Table: null 
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: print(a*b)
 
Sym Table: null 
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: print(a*b)
 
Sym Table: null 
Output Console: [25, 2] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: return()
Fork(Call(sum){[v, w]})
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: return()
Fork(Call(sum){[v, w]})
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: Fork(Call(sum){[v, w]})
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack: Fork(Call(sum){[v, w]})
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 2 
Exe Stack:  
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 3 
Exe Stack: Call(sum){[v, w]}
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 3 
Exe Stack: Call(sum){[v, w]}
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 3 
Exe Stack: print(a+b)
return()
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 3 
Exe Stack: print(a+b)
return()
 
Sym Table: null 
Output Console: [25, 2, 10] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 3 
Exe Stack: return()
 
Sym Table: null 
Output Console: [25, 2, 10, 7] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 3 
Exe Stack: return()
 
Sym Table: null 
Output Console: [25, 2, 10, 7] 
File Table:  
Heap:  
StackOfSymTable: a=2 b=5 
a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 3 
Exe Stack:  
Sym Table: null 
Output Console: [25, 2, 10, 7] 
File Table:  
Heap:  
StackOfSymTable: a=0 b=0 v=2 w=5 

ProceduresTable: product=[a, b]=print(a*b) sum=[a, b]=print(a+b) 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='a', type=Reference(int) }
VarDeclaration{name='b', type=Reference(int) }
VarDeclaration{name='v', type=int}
New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: null 
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='a', type=Reference(int) }
VarDeclaration{name='b', type=Reference(int) }
VarDeclaration{name='v', type=int}
New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: null 
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='a', type=Reference(int) }
VarDeclaration{name='b', type=Reference(int) }
VarDeclaration{name='v', type=int}
New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: null 
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=Reference(int) }
VarDeclaration{name='v', type=int}
New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(0, int)  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=(0, int) 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=Reference(int) }
VarDeclaration{name='v', type=int}
New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(0, int)  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=(0, int) 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=Reference(int) }
VarDeclaration{name='v', type=int}
New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(0, int)  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=(0, int) 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=Reference(int) }
VarDeclaration{name='v', type=int}
New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(0, int)  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=(0, int) 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(0, int) b=(0, int)  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=(0, int) b=(0, int) 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(0, int) b=(0, int)  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=(0, int) b=(0, int) 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(0, int) b=(0, int)  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=(0, int) b=(0, int) 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(0, int) b=(0, int)  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=(0, int) b=(0, int) 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(0, int) b=(0, int) v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=(0, int) b=(0, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(0, int) b=(0, int) v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=(0, int) b=(0, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(0, int) b=(0, int) v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=(0, int) b=(0, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(0, int) b=(0, int) v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=(0, int) b=(0, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(0, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->0
 
StackOfSymTable: a=(1, int) b=(0, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(0, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->0
 
StackOfSymTable: a=(1, int) b=(0, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(0, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->0
 
StackOfSymTable: a=(1, int) b=(0, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(0, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->0
 
StackOfSymTable: a=(1, int) b=(0, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->0
2->0
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->0
2->0
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->0
2->0
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->0
2->0
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->1
2->0
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->1
2->0
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->1
2->0
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->1
2->0
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: if (ReadHeap(a)<ReadHeap(b)) then {v=100} else {v=200}
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: if (ReadHeap(a)<ReadHeap(b)) then {v=100} else {v=200}
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: v=100
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: v=100
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=100  
Output Console: [] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=100 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=100  
Output Console: [] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=100 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=100  
Output Console: [] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=100 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=100  
Output Console: [] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=100 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=100  
Output Console: [100] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=100 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=100  
Output Console: [100] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=100 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)
 
Sym Table: a=(1, int) b=(2, int) v=100  
Output Console: [100] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=100 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)
 
Sym Table: a=(1, int) b=(2, int) v=100  
Output Console: [100] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=100 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: if (ReadHeap(b)-2>ReadHeap(a)) then {v=100} else {v=200}
print(v)
 
Sym Table: a=(1, int) b=(2, int) v=100  
Output Console: [100] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=100 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: if (ReadHeap(b)-2>ReadHeap(a)) then {v=100} else {v=200}
print(v)
 
Sym Table: a=(1, int) b=(2, int) v=100  
Output Console: [100] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=100 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: v=200
print(v)
 
Sym Table: a=(1, int) b=(2, int) v=100  
Output Console: [100] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=100 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: v=200
print(v)
 
Sym Table: a=(1, int) b=(2, int) v=100  
Output Console: [100] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=100 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: print(v)
 
Sym Table: a=(1, int) b=(2, int) v=200  
Output Console: [100] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=200 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: print(v)
 
Sym Table: a=(1, int) b=(2, int) v=200  
Output Console: [100] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=200 

ProceduresTable: 

Program state
ID: 1 
Exe Stack:  
Sym Table: a=(1, int) b=(2, int) v=200  
Output Console: [100, 200] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=200 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='a', type=Reference(int) }
VarDeclaration{name='b', type=Reference(int) }
VarDeclaration{name='v', type=int}
New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: null 
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='a', type=Reference(int) }
VarDeclaration{name='b', type=Reference(int) }
VarDeclaration{name='v', type=int}
New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: null 
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='a', type=Reference(int) }
VarDeclaration{name='b', type=Reference(int) }
VarDeclaration{name='v', type=int}
New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: null 
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=Reference(int) }
VarDeclaration{name='v', type=int}
New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(0, int)  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=(0, int) 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=Reference(int) }
VarDeclaration{name='v', type=int}
New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(0, int)  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=(0, int) 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=Reference(int) }
VarDeclaration{name='v', type=int}
New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(0, int)  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=(0, int) 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=Reference(int) }
VarDeclaration{name='v', type=int}
New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(0, int)  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=(0, int) 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(0, int) b=(0, int)  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=(0, int) b=(0, int) 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(0, int) b=(0, int)  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=(0, int) b=(0, int) 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(0, int) b=(0, int)  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=(0, int) b=(0, int) 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(0, int) b=(0, int)  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=(0, int) b=(0, int) 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(0, int) b=(0, int) v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=(0, int) b=(0, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(0, int) b=(0, int) v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=(0, int) b=(0, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(0, int) b=(0, int) v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=(0, int) b=(0, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(0, int) b=(0, int) v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=(0, int) b=(0, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(0, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->0
 
StackOfSymTable: a=(1, int) b=(0, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(0, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->0
 
StackOfSymTable: a=(1, int) b=(0, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(0, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->0
 
StackOfSymTable: a=(1, int) b=(0, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(0, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->0
 
StackOfSymTable: a=(1, int) b=(0, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->0
2->0
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->0
2->0
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->0
2->0
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->0
2->0
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->1
2->0
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->1
2->0
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->1
2->0
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->1
2->0
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: if (ReadHeap(a)<ReadHeap(b)) then {v=100} else {v=200}
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: if (ReadHeap(a)<ReadHeap(b)) then {v=100} else {v=200}
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: v=100
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: v=100
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=100  
Output Console: [] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=100 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=100  
Output Console: [] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=100 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=100  
Output Console: [] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=100 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=100  
Output Console: [] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=100 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=100  
Output Console: [100] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=100 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=100  
Output Console: [100] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=100 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)
 
Sym Table: a=(1, int) b=(2, int) v=100  
Output Console: [100] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=100 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)
 
Sym Table: a=(1, int) b=(2, int) v=100  
Output Console: [100] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=100 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: if (ReadHeap(b)-2>ReadHeap(a)) then {v=100} else {v=200}
print(v)
 
Sym Table: a=(1, int) b=(2, int) v=100  
Output Console: [100] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=100 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: if (ReadHeap(b)-2>ReadHeap(a)) then {v=100} else {v=200}
print(v)
 
Sym Table: a=(1, int) b=(2, int) v=100  
Output Console: [100] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=100 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: v=200
print(v)
 
Sym Table: a=(1, int) b=(2, int) v=100  
Output Console: [100] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=100 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: v=200
print(v)
 
Sym Table: a=(1, int) b=(2, int) v=100  
Output Console: [100] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=100 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: print(v)
 
Sym Table: a=(1, int) b=(2, int) v=200  
Output Console: [100] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=200 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: print(v)
 
Sym Table: a=(1, int) b=(2, int) v=200  
Output Console: [100] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=200 

ProceduresTable: 

Program state
ID: 1 
Exe Stack:  
Sym Table: a=(1, int) b=(2, int) v=200  
Output Console: [100, 200] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=200 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='a', type=Reference(int) }
VarDeclaration{name='b', type=Reference(int) }
VarDeclaration{name='v', type=int}
New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: null 
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='a', type=Reference(int) }
VarDeclaration{name='b', type=Reference(int) }
VarDeclaration{name='v', type=int}
New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: null 
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='a', type=Reference(int) }
VarDeclaration{name='b', type=Reference(int) }
VarDeclaration{name='v', type=int}
New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: null 
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=Reference(int) }
VarDeclaration{name='v', type=int}
New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(0, int)  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=(0, int) 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=Reference(int) }
VarDeclaration{name='v', type=int}
New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(0, int)  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=(0, int) 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=Reference(int) }
VarDeclaration{name='v', type=int}
New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(0, int)  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=(0, int) 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=Reference(int) }
VarDeclaration{name='v', type=int}
New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(0, int)  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=(0, int) 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(0, int) b=(0, int)  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=(0, int) b=(0, int) 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(0, int) b=(0, int)  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=(0, int) b=(0, int) 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(0, int) b=(0, int)  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=(0, int) b=(0, int) 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(0, int) b=(0, int)  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=(0, int) b=(0, int) 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(0, int) b=(0, int) v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=(0, int) b=(0, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(0, int) b=(0, int) v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=(0, int) b=(0, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(0, int) b=(0, int) v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=(0, int) b=(0, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(0, int) b=(0, int) v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=(0, int) b=(0, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(0, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->0
 
StackOfSymTable: a=(1, int) b=(0, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(0, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->0
 
StackOfSymTable: a=(1, int) b=(0, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(0, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->0
 
StackOfSymTable: a=(1, int) b=(0, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(0, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->0
 
StackOfSymTable: a=(1, int) b=(0, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->0
2->0
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->0
2->0
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->0
2->0
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->0
2->0
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->1
2->0
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->1
2->0
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->1
2->0
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->1
2->0
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: if (ReadHeap(a)<ReadHeap(b)) then {v=100} else {v=200}
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: if (ReadHeap(a)<ReadHeap(b)) then {v=100} else {v=200}
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: v=100
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: v=100
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=100  
Output Console: [] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=100 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=100  
Output Console: [] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=100 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=100  
Output Console: [] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=100 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=100  
Output Console: [] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=100 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=100  
Output Console: [100] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=100 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=100  
Output Console: [100] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=100 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)
 
Sym Table: a=(1, int) b=(2, int) v=100  
Output Console: [100] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=100 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)
 
Sym Table: a=(1, int) b=(2, int) v=100  
Output Console: [100] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=100 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: if (ReadHeap(b)-2>ReadHeap(a)) then {v=100} else {v=200}
print(v)
 
Sym Table: a=(1, int) b=(2, int) v=100  
Output Console: [100] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=100 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: if (ReadHeap(b)-2>ReadHeap(a)) then {v=100} else {v=200}
print(v)
 
Sym Table: a=(1, int) b=(2, int) v=100  
Output Console: [100] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=100 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: v=200
print(v)
 
Sym Table: a=(1, int) b=(2, int) v=100  
Output Console: [100] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=100 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: v=200
print(v)
 
Sym Table: a=(1, int) b=(2, int) v=100  
Output Console: [100] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=100 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: print(v)
 
Sym Table: a=(1, int) b=(2, int) v=200  
Output Console: [100] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=200 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: print(v)
 
Sym Table: a=(1, int) b=(2, int) v=200  
Output Console: [100] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=200 

ProceduresTable: 

Program state
ID: 1 
Exe Stack:  
Sym Table: a=(1, int) b=(2, int) v=200  
Output Console: [100, 200] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=200 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='a', type=Reference(int) }
VarDeclaration{name='b', type=Reference(int) }
VarDeclaration{name='v', type=int}
New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: null 
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='a', type=Reference(int) }
VarDeclaration{name='b', type=Reference(int) }
VarDeclaration{name='v', type=int}
New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: null 
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='a', type=Reference(int) }
VarDeclaration{name='b', type=Reference(int) }
VarDeclaration{name='v', type=int}
New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: null 
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=Reference(int) }
VarDeclaration{name='v', type=int}
New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(0, int)  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=(0, int) 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=Reference(int) }
VarDeclaration{name='v', type=int}
New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(0, int)  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=(0, int) 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=Reference(int) }
VarDeclaration{name='v', type=int}
New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(0, int)  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=(0, int) 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='b', type=Reference(int) }
VarDeclaration{name='v', type=int}
New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(0, int)  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=(0, int) 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(0, int) b=(0, int)  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=(0, int) b=(0, int) 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(0, int) b=(0, int)  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=(0, int) b=(0, int) 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(0, int) b=(0, int)  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=(0, int) b=(0, int) 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: VarDeclaration{name='v', type=int}
New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(0, int) b=(0, int)  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=(0, int) b=(0, int) 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(0, int) b=(0, int) v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=(0, int) b=(0, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(0, int) b=(0, int) v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=(0, int) b=(0, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(0, int) b=(0, int) v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=(0, int) b=(0, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: New(a, 0)
New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(0, int) b=(0, int) v=0  
Output Console: [] 
File Table:  
Heap:  
StackOfSymTable: a=(0, int) b=(0, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(0, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->0
 
StackOfSymTable: a=(1, int) b=(0, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(0, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->0
 
StackOfSymTable: a=(1, int) b=(0, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(0, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->0
 
StackOfSymTable: a=(1, int) b=(0, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: New(b, 0)
WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(0, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->0
 
StackOfSymTable: a=(1, int) b=(0, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->0
2->0
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->0
2->0
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->0
2->0
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: WriteHeap( a,1)
WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->0
2->0
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->1
2->0
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->1
2->0
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->1
2->0
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: WriteHeap( b,2)
v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->1
2->0
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: v = ReadHeap(a)<ReadHeap(b) ? 100 : 200
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: if (ReadHeap(a)<ReadHeap(b)) then {v=100} else {v=200}
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: if (ReadHeap(a)<ReadHeap(b)) then {v=100} else {v=200}
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: v=100
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: v=100
print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=0  
Output Console: [] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=0 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=100  
Output Console: [] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=100 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=100  
Output Console: [] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=100 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=100  
Output Console: [] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=100 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: print(v)
v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=100  
Output Console: [] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=100 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=100  
Output Console: [100] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=100 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)

 
Sym Table: a=(1, int) b=(2, int) v=100  
Output Console: [100] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=100 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)
 
Sym Table: a=(1, int) b=(2, int) v=100  
Output Console: [100] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=100 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: v = ReadHeap(b)-2>ReadHeap(a) ? 100 : 200
print(v)
 
Sym Table: a=(1, int) b=(2, int) v=100  
Output Console: [100] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=100 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: if (ReadHeap(b)-2>ReadHeap(a)) then {v=100} else {v=200}
print(v)
 
Sym Table: a=(1, int) b=(2, int) v=100  
Output Console: [100] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=100 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: if (ReadHeap(b)-2>ReadHeap(a)) then {v=100} else {v=200}
print(v)
 
Sym Table: a=(1, int) b=(2, int) v=100  
Output Console: [100] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=100 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: v=200
print(v)
 
Sym Table: a=(1, int) b=(2, int) v=100  
Output Console: [100] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=100 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: v=200
print(v)
 
Sym Table: a=(1, int) b=(2, int) v=100  
Output Console: [100] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=100 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: print(v)
 
Sym Table: a=(1, int) b=(2, int) v=200  
Output Console: [100] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=200 

ProceduresTable: 

Program state
ID: 1 
Exe Stack: print(v)
 
Sym Table: a=(1, int) b=(2, int) v=200  
Output Console: [100] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=200 

ProceduresTable: 

Program state
ID: 1 
Exe Stack:  
Sym Table: a=(1, int) b=(2, int) v=200  
Output Console: [100, 200] 
File Table:  
Heap: 1->1
2->2
 
StackOfSymTable: a=(1, int) b=(2, int) v=200 

ProceduresTable: 

